package de.frosner.datagenerator.generator;

import java.util.Iterator;
import java.util.List;

import javax.annotation.Nonnull;
import javax.annotation.concurrent.Immutable;

import net.sf.qualitycheck.Check;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.Lists;

import de.frosner.datagenerator.distributions.Distribution;
import de.frosner.datagenerator.features.FeatureDefinition;
import de.frosner.datagenerator.features.FeatureValue;

/**
 * Immutable representation of a generated instance.
 * <p>
 * Instances consist of a list of {@linkplain FeatureValue}s. Instances have an ID that should be incremented for each
 * instance generated by the {@linkplain DataGenerator#generate()} method.
 * <p>
 * Other terms for instances, depending on the scientific context, may be <i>object</i>, <i>record</i> or <i>entity</i>.
 */
@Immutable
public final class Instance implements Iterable<FeatureValue> {

	private final int _id;
	private final List<FeatureValue> _values;

	/**
	 * Builder for building instances.
	 */
	public static final class InstanceBuilder {

		private final int _id;
		private final List<FeatureValue> _values;

		/**
		 * Creates a new builder for building an {@linkplain Instance} with the specified ID.
		 * 
		 * @param id
		 *            of the instance built
		 */
		public InstanceBuilder(int id) {
			_id = id;
			_values = Lists.newArrayList();
		}

		/**
		 * Adds a feature value to the instance that is built.
		 * 
		 * @param value
		 *            of the feature to be added
		 * @return builder containing the added feature
		 */
		public InstanceBuilder addFeatureValue(FeatureValue value) {
			_values.add(value);
			return this;
		}

		/**
		 * Builds an instance.
		 * 
		 * @return instance built
		 */
		public Instance build() {
			return new Instance(_id, _values);
		}

	}

	public static InstanceBuilder builder(int instanceId) {
		return new InstanceBuilder(instanceId);
	}

	/**
	 * Constructs a new {@linkplain Instance} with the specified ID and {@linkplain FeatureValue}s. The ID should be
	 * incremented for each instance generated by the {@linkplain DataGenerator#generate()} method.
	 * 
	 * @param id
	 * @param values
	 */
	public Instance(int id, @Nonnull List<FeatureValue> features) {
		this(id, features.toArray(new FeatureValue[0]));
	}

	/**
	 * Constructs a new {@linkplain Instance} with the specified ID and {@linkplain FeatureValue}s. The ID should be
	 * incremented for each instance generated by the {@linkplain DataGenerator#generate()} method.
	 * 
	 * @param id
	 * @param values
	 */
	public Instance(int id, @Nonnull FeatureValue... values) {
		Check.noNullElements(values, "All feature values must not be null.");
		_values = ImmutableList.copyOf(values);
		_id = id;
	}

	/**
	 * Returns the {@linkplain FeatureValue} at the specified index. It should have been generated using the
	 * {@linkplain Distribution} defined by the {@linkplain FeatureDefinition} at the same position.
	 * 
	 * @param index
	 *            of the feature value to return
	 * @return {@linkplain FeatureValue} at the specified index
	 */
	public FeatureValue getFeatureValue(int index) {
		return _values.get(index);
	}

	/**
	 * Returns the ID of the instance. Increasing IDs should reflect the order in which the instances have been
	 * generated by the {@linkplain DataGenerator#generate()} method.
	 * 
	 * @return instance ID
	 */
	public int getId() {
		return _id;
	}

	@Override
	public Iterator<FeatureValue> iterator() {
		return _values.listIterator();
	}

	@Override
	public String toString() {
		return _values.toString();
	}

	@Override
	public int hashCode() {
		return _id;
	}

	@Override
	public boolean equals(Object o) {
		if (o instanceof Instance) {
			Instance i = (Instance) o;
			return (i._id == _id) && (i._values.equals(_values));
		} else {
			return false;
		}
	}

}
